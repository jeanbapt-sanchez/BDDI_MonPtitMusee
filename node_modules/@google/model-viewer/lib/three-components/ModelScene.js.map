{"version":3,"file":"ModelScene.js","sourceRoot":"","sources":["../../src/three-components/ModelScene.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Camera, Event as ThreeEvent, Matrix3, Object3D, PerspectiveCamera, Raycaster, Scene, Vector2, Vector3} from 'three';\n\nimport {USE_OFFSCREEN_CANVAS} from '../constants.js';\nimport ModelViewerElementBase from '../model-viewer-base.js';\n\nimport {Damper, SETTLING_TIME} from './Damper.js';\nimport Model, {DEFAULT_FOV_DEG} from './Model.js';\n\nexport interface ModelLoadEvent extends ThreeEvent {\n  url: string\n}\n\nexport interface ModelSceneConfig {\n  element: ModelViewerElementBase;\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n}\n\nexport type IlluminationRole = 'primary'|'secondary'\n\nexport const IlluminationRole: {[index: string]: IlluminationRole} = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\n\nconst DEFAULT_TAN_FOV = Math.tan((DEFAULT_FOV_DEG / 2) * Math.PI / 180);\n\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\n\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  public aspect = 1;\n  public canvas: HTMLCanvasElement;\n  public shadowIntensity = 0;\n  public shadowSoftness = 1;\n  public width = 1;\n  public height = 1;\n  public isDirty = false;\n  public element: ModelViewerElementBase;\n  public context: CanvasRenderingContext2D|ImageBitmapRenderingContext|null =\n      null;\n  public exposure = 1;\n  public model: Model;\n  public canScale = true;\n  public framedFieldOfView = DEFAULT_FOV_DEG;\n  public activeCamera: Camera;\n  // These default camera values are never used, as they are reset once the\n  // model is loaded and framing is computed.\n  public camera = new PerspectiveCamera(45, 1, 0.1, 100);\n\n  private goalTarget = new Vector3();\n  private targetDamperX = new Damper();\n  private targetDamperY = new Damper();\n  private targetDamperZ = new Damper();\n\n  constructor({canvas, element, width, height}: ModelSceneConfig) {\n    super();\n\n    this.name = 'ModelScene';\n\n    this.element = element;\n    this.canvas = canvas;\n    this.model = new Model();\n\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n\n    this.activeCamera = this.camera;\n\n    this.add(this.model);\n\n    this.setSize(width, height);\n\n    this.model.addEventListener(\n        'model-load', (event: any) => this.onModelLoad(event));\n  }\n\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  createContext() {\n    if (USE_OFFSCREEN_CANVAS) {\n      this.context = this.canvas.getContext('bitmaprenderer')!;\n    } else {\n      this.context = this.canvas.getContext('2d')!;\n    }\n  }\n\n  /**\n   * Sets the model via URL.\n   */\n  async setModelSource(\n      source: string|null, progressCallback?: (progress: number) => void) {\n    try {\n      await this.model.setSource(this.element, source, progressCallback);\n    } catch (e) {\n      throw new Error(\n          `Could not set model source to '${source}': ${e.message}`);\n    }\n  }\n\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width: number, height: number) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n\n    this.aspect = this.width / this.height;\n    this.frameModel();\n\n    this.isDirty = true;\n  }\n\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  frameModel() {\n    const vertical = DEFAULT_TAN_FOV *\n        Math.max(1, this.model.fieldOfViewAspect / this.aspect);\n    this.framedFieldOfView = 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize(): {width: number, height: number} {\n    return {width: this.width, height: this.height};\n  }\n\n  /**\n   * Returns the current camera.\n   */\n  getCamera(): Camera {\n    return this.activeCamera;\n  }\n\n  /**\n   * Sets the passed in camera to be used for rendering.\n   */\n  setCamera(camera: Camera) {\n    this.activeCamera = camera;\n  }\n\n  /**\n   * Called when the model's contents have loaded, or changed.\n   */\n  onModelLoad(event: {url: string}) {\n    this.frameModel();\n    this.setShadowIntensity(this.shadowIntensity);\n    this.isDirty = true;\n    this.dispatchEvent({type: 'model-load', url: event.url});\n  }\n\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX: number, modelY: number, modelZ: number) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget(): Vector3 {\n    return vector3.copy(this.goalTarget).multiplyScalar(-1);\n  }\n\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta: number) {\n    const goal = this.goalTarget;\n    const target = this.model.position;\n    if (!goal.equals(target)) {\n      const radius = this.model.idealCameraDistance;\n      let {x, y, z} = target;\n      x = this.targetDamperX.update(x, goal.x, delta, radius);\n      y = this.targetDamperY.update(y, goal.y, delta, radius);\n      z = this.targetDamperZ.update(z, goal.z, delta, radius);\n      this.model.position.set(x, y, z);\n      this.model.updateMatrixWorld();\n      this.model.setShadowRotation(this.yaw);\n      this.isDirty = true;\n    }\n  }\n\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX: number, worldZ: number) {\n    const {x, z} = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY: number) {\n    this.rotation.y = radiansY;\n    this.model.setShadowRotation(radiansY);\n    this.isDirty = true;\n  }\n\n  get yaw(): number {\n    return this.rotation.y;\n  }\n\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity: number) {\n    shadowIntensity = Math.max(shadowIntensity, 0);\n    this.shadowIntensity = shadowIntensity;\n    if (this.model.hasModel()) {\n      this.model.setShadowIntensity(shadowIntensity, this.shadowSoftness);\n    }\n  }\n\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness: number) {\n    this.shadowSoftness = softness;\n    this.model.setShadowSoftness(softness);\n  }\n\n  /**\n   * This method returns the world position and model-space normal of the point\n   * on the mesh corresponding to the input pixel coordinates given relative to\n   * the model-viewer element. If the mesh is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(pixelPosition: Vector2, object: Object3D = this):\n      {position: Vector3, normal: Vector3}|null {\n    raycaster.setFromCamera(pixelPosition, this.getCamera());\n    const hits = raycaster.intersectObject(object, true);\n\n    if (hits.length === 0) {\n      return null;\n    }\n\n    const hit = hits[0];\n    if (hit.face == null) {\n      return null;\n    }\n\n    hit.face.normal.applyNormalMatrix(\n        new Matrix3().getNormalMatrix(hit.object.matrixWorld));\n\n    return {position: hit.point, normal: hit.face.normal};\n  }\n}\n"]}
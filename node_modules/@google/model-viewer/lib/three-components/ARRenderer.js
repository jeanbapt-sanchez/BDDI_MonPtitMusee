/* @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
import '../types/webxr.js';
import { EventDispatcher, Matrix4, PerspectiveCamera, Ray, Vector3 } from 'three';
import { $onResize } from '../model-viewer-base.js';
import { assertIsArCandidate } from '../utilities.js';
import { Damper } from './Damper.js';
import { PlacementBox } from './PlacementBox.js';
// AR shadow is not user-configurable. This is to pave the way for AR lighting
// estimation, which will be used once available in WebXR.
const AR_SHADOW_INTENSITY = 0.3;
const ROTATION_RATE = 1.5;
// Angle down (towards bottom of screen) from camera center ray to use for hit
// testing against the floor. This makes placement faster and more intuitive
// assuming the phone is in portrait mode. This seems to be a reasonable
// assumption for the start of the session and UI will lack landscape mode to
// encourage upright use.
const HIT_ANGLE_DEG = 20;
// Slow down the dampers for initial placement.
const INTRO_DAMPER_RATE = 0.4;
const SCALE_SNAP_HIGH = 1.2;
const SCALE_SNAP_LOW = 1 / SCALE_SNAP_HIGH;
// For automatic dynamic viewport scaling, don't let the scale drop below this limit.
const MIN_VIEWPORT_SCALE = 0.25;
export const ARStatus = {
    NOT_PRESENTING: 'not-presenting',
    SESSION_STARTED: 'session-started',
    OBJECT_PLACED: 'object-placed',
    FAILED: 'failed'
};
const $presentedScene = Symbol('presentedScene');
const $placementBox = Symbol('placementBox');
const $lastTick = Symbol('lastTick');
const $turntableRotation = Symbol('turntableRotation');
const $oldShadowIntensity = Symbol('oldShadowIntensity');
const $oldBackground = Symbol('oldBackground');
const $rafId = Symbol('rafId');
export const $currentSession = Symbol('currentSession');
const $tick = Symbol('tick');
const $refSpace = Symbol('refSpace');
const $viewerRefSpace = Symbol('viewerRefSpace');
const $frame = Symbol('frame');
const $initialized = Symbol('initialized');
const $initialModelToWorld = Symbol('initialModelToWorld');
const $placementComplete = Symbol('placementComplete');
const $initialHitSource = Symbol('hitTestSource');
const $transientHitTestSource = Symbol('transiertHitTestSource');
const $inputSource = Symbol('inputSource');
const $isTranslating = Symbol('isTranslating');
const $isRotating = Symbol('isRotating');
const $isScaling = Symbol('isScaling');
const $lastDragPosition = Symbol('lastDragPosition');
const $lastScalar = Symbol('lastScalar');
const $goalPosition = Symbol('goalPosition');
const $goalYaw = Symbol('goalYaw');
const $goalScale = Symbol('goalScale');
const $xDamper = Symbol('xDamper');
const $yDamper = Symbol('yDamper');
const $zDamper = Symbol('zDamper');
const $yawDamper = Symbol('yawDamper');
const $scaleDamper = Symbol('scaleDamper');
const $damperRate = Symbol('damperRate');
const $resolveCleanup = Symbol('resolveCleanup');
const $exitWebXRButtonContainer = Symbol('exitWebXRButtonContainer');
export const $onWebXRFrame = Symbol('onWebXRFrame');
const $postSessionCleanup = Symbol('postSessionCleanup');
const $updateCamera = Symbol('updateCamera');
const $placeInitially = Symbol('placeInitially');
const $getHitPoint = Symbol('getHitPoint');
const $onSelectStart = Symbol('onSelectStart');
const $onSelectEnd = Symbol('onSelect');
const $onUpdateScene = Symbol('onUpdateScene');
const $fingerSeparation = Symbol('fingerSeparation');
const $processInput = Symbol('processInput');
const $moveScene = Symbol('moveScene');
const $onExitWebXRButtonContainerClick = Symbol('onExitWebXRButtonContainerClick');
const vector3 = new Vector3();
const matrix4 = new Matrix4();
const hitPosition = new Vector3();
export class ARRenderer extends EventDispatcher {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.camera = new PerspectiveCamera();
        this[_a] = null;
        this[_b] = null;
        this[_c] = null;
        this[_d] = null;
        this[_e] = null;
        this[_f] = null;
        this[_g] = null;
        this[_h] = null;
        this[_j] = null;
        this[_k] = null;
        this[_l] = null;
        this[_m] = null;
        this[_o] = null;
        this[_p] = null;
        this[_q] = null;
        this[_r] = null;
        this[_s] = false;
        this[_t] = new Matrix4();
        this[_u] = false;
        this[_v] = false;
        this[_w] = false;
        this[_x] = false;
        this[_y] = new Vector3();
        this[_z] = 0;
        this[_0] = new Vector3();
        this[_1] = 0;
        this[_2] = 1;
        this[_3] = new Damper();
        this[_4] = new Damper();
        this[_5] = new Damper();
        this[_6] = new Damper();
        this[_7] = new Damper();
        this[_8] = 1;
        this[_9] = () => this.stopPresenting();
        this[_10] = () => {
            if (this[$placementBox] != null && this.isPresenting) {
                this[$placementBox].dispose();
                this[$placementBox] = new PlacementBox(this[$presentedScene].model);
            }
        };
        this[_11] = (event) => {
            const hitSource = this[$transientHitTestSource];
            if (hitSource == null) {
                return;
            }
            const fingers = this[$frame].getHitTestResultsForTransientInput(hitSource);
            const scene = this[$presentedScene];
            const box = this[$placementBox];
            if (fingers.length === 1) {
                this[$inputSource] = event.inputSource;
                const { axes } = this[$inputSource].gamepad;
                const hitPosition = box.getHit(this[$presentedScene], axes[0], axes[1]);
                box.show = true;
                if (hitPosition != null) {
                    this[$isTranslating] = true;
                    this[$lastDragPosition].copy(hitPosition);
                }
                else {
                    this[$isRotating] = true;
                    this[$lastScalar] = axes[0];
                }
            }
            else if (fingers.length === 2 && scene.canScale) {
                box.show = true;
                this[$isScaling] = true;
                this[$lastScalar] = this[$fingerSeparation](fingers) / scene.scale.x;
            }
        };
        this[_12] = () => {
            this[$isTranslating] = false;
            this[$isRotating] = false;
            this[$isScaling] = false;
            this[$inputSource] = null;
            this[$goalPosition].y +=
                this[$placementBox].offsetHeight * this[$presentedScene].scale.x;
            this[$placementBox].show = false;
        };
        this.threeRenderer = renderer.threeRenderer;
        // Turn this off, as the matrix is set directly from webXR rather than using
        // postion, rotation, scale.
        this.camera.matrixAutoUpdate = false;
    }
    async resolveARSession(scene) {
        assertIsArCandidate();
        const session = await navigator.xr.requestSession('immersive-ar', {
            requiredFeatures: ['hit-test'],
            optionalFeatures: ['dom-overlay'],
            domOverlay: { root: scene.element.shadowRoot.querySelector('div.default') }
        });
        const gl = this.threeRenderer.context;
        // `makeXRCompatible` replaced `setCompatibleXRDevice` in Chrome M73 @TODO
        // #293, handle WebXR API changes. WARNING: this can cause a GL context
        // loss according to the spec, though current implementations don't do so.
        await gl.makeXRCompatible();
        session.updateRenderState({ baseLayer: new XRWebGLLayer(session, gl, { alpha: true }) });
        // The render state update takes effect on the next animation frame. Wait
        // for it so that we get a framebuffer.
        let waitForXRAnimationFrame = new Promise((resolve, _reject) => {
            session.requestAnimationFrame(() => resolve());
        });
        await waitForXRAnimationFrame;
        scene.element[$onResize](window.screen);
        const { framebuffer, framebufferWidth, framebufferHeight } = session.renderState.baseLayer;
        // Redirect rendering to the WebXR offscreen framebuffer.
        // TODO: this method should be added to three.js's exported interface.
        this.threeRenderer.setFramebuffer(framebuffer);
        this.threeRenderer.setPixelRatio(1);
        this.threeRenderer.setSize(framebufferWidth, framebufferHeight, false);
        const exitButton = scene.element.shadowRoot.querySelector('.slot.exit-webxr-ar-button');
        exitButton.classList.add('enabled');
        exitButton.addEventListener('click', this[$onExitWebXRButtonContainerClick]);
        this[$exitWebXRButtonContainer] = exitButton;
        return session;
    }
    /**
     * The currently presented scene, if any
     */
    get presentedScene() {
        return this[$presentedScene];
    }
    /**
     * Resolves to true if the renderer has detected all the necessary qualities
     * to support presentation in AR.
     */
    async supportsPresentation() {
        try {
            assertIsArCandidate();
            return await navigator.xr.isSessionSupported('immersive-ar');
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Present a scene in AR
     */
    async present(scene) {
        if (this.isPresenting) {
            console.warn('Cannot present while a model is already presenting');
        }
        let waitForAnimationFrame = new Promise((resolve, _reject) => {
            requestAnimationFrame(() => resolve());
        });
        scene.model.setHotspotsVisibility(false);
        scene.isDirty = true;
        // Render a frame to turn off the hotspots
        await waitForAnimationFrame;
        // This sets isPresenting to true
        this[$presentedScene] = scene;
        const currentSession = await this.resolveARSession(scene);
        currentSession.addEventListener('end', () => {
            this[$postSessionCleanup]();
        }, { once: true });
        this[$refSpace] = await currentSession.requestReferenceSpace('local');
        this[$viewerRefSpace] =
            await currentSession.requestReferenceSpace('viewer');
        scene.setCamera(this.camera);
        this[$initialized] = false;
        this[$damperRate] = INTRO_DAMPER_RATE;
        this[$turntableRotation] = scene.yaw;
        scene.yaw = 0;
        this[$goalYaw] = 0;
        this[$goalScale] = 1;
        this[$oldBackground] = scene.background;
        scene.background = null;
        this[$oldShadowIntensity] = scene.shadowIntensity;
        scene.setShadowIntensity(0);
        scene.addEventListener('model-load', this[$onUpdateScene]);
        const radians = HIT_ANGLE_DEG * Math.PI / 180;
        const ray = new XRRay(new DOMPoint(0, 0, 0), { x: 0, y: -Math.sin(radians), z: -Math.cos(radians) });
        currentSession
            .requestHitTestSource({ space: this[$viewerRefSpace], offsetRay: ray })
            .then(hitTestSource => {
            this[$initialHitSource] = hitTestSource;
        });
        this[$currentSession] = currentSession;
        this[$placementBox] = new PlacementBox(scene.model);
        this[$placementComplete] = false;
        this[$lastTick] = performance.now();
        // Start the event loop.
        this[$tick]();
    }
    /**
     * If currently presenting a scene in AR, stops presentation and exits AR.
     */
    async stopPresenting() {
        if (!this.isPresenting) {
            return;
        }
        const cleanupPromise = new Promise((resolve) => {
            this[$resolveCleanup] = resolve;
        });
        try {
            await this[$currentSession].end();
            await cleanupPromise;
        }
        catch (error) {
            console.warn('Error while trying to end AR session');
            console.warn(error);
            this[$postSessionCleanup]();
        }
    }
    [(_a = $placementBox, _b = $lastTick, _c = $turntableRotation, _d = $oldShadowIntensity, _e = $oldBackground, _f = $rafId, _g = $currentSession, _h = $refSpace, _j = $viewerRefSpace, _k = $frame, _l = $initialHitSource, _m = $transientHitTestSource, _o = $inputSource, _p = $presentedScene, _q = $resolveCleanup, _r = $exitWebXRButtonContainer, _s = $initialized, _t = $initialModelToWorld, _u = $placementComplete, _v = $isTranslating, _w = $isRotating, _x = $isScaling, _y = $lastDragPosition, _z = $lastScalar, _0 = $goalPosition, _1 = $goalYaw, _2 = $goalScale, _3 = $xDamper, _4 = $yDamper, _5 = $zDamper, _6 = $yawDamper, _7 = $scaleDamper, _8 = $damperRate, _9 = $onExitWebXRButtonContainerClick, $postSessionCleanup)]() {
        // The offscreen WebXR framebuffer is now invalid, switch
        // back to the default framebuffer for canvas output.
        // TODO: this method should be added to three.js's exported interface.
        this.threeRenderer.setFramebuffer(null);
        const session = this[$currentSession];
        if (session != null) {
            session.removeEventListener('selectstart', this[$onSelectStart]);
            session.removeEventListener('selectend', this[$onSelectEnd]);
            session.cancelAnimationFrame(this[$rafId]);
            this[$currentSession] = null;
        }
        const scene = this[$presentedScene];
        if (scene != null) {
            const { model, element } = scene;
            scene.setCamera(scene.camera);
            model.remove(this[$placementBox]);
            scene.position.set(0, 0, 0);
            scene.scale.set(1, 1, 1);
            model.setShadowScaleAndOffset(1, 0);
            const yaw = this[$turntableRotation];
            if (yaw != null) {
                scene.yaw = yaw;
            }
            const intensity = this[$oldShadowIntensity];
            if (intensity != null) {
                scene.setShadowIntensity(intensity);
            }
            const background = this[$oldBackground];
            if (background != null) {
                scene.background = background;
            }
            scene.removeEventListener('model-load', this[$onUpdateScene]);
            model.orientHotspots(0);
            element.requestUpdate('cameraTarget');
            element[$onResize](element.getBoundingClientRect());
        }
        // Force the Renderer to update its size
        this.renderer.height = 0;
        const exitButton = this[$exitWebXRButtonContainer];
        if (exitButton != null) {
            exitButton.classList.remove('enabled');
            exitButton.removeEventListener('click', this[$onExitWebXRButtonContainerClick]);
            this[$exitWebXRButtonContainer] = null;
        }
        const hitSource = this[$transientHitTestSource];
        if (hitSource != null) {
            hitSource.cancel();
            this[$transientHitTestSource] = null;
        }
        const hitSourceInitial = this[$initialHitSource];
        if (hitSourceInitial != null) {
            hitSourceInitial.cancel();
            this[$initialHitSource] = null;
        }
        if (this[$placementBox] != null) {
            this[$placementBox].dispose();
            this[$placementBox] = null;
        }
        this[$lastTick] = null;
        this[$turntableRotation] = null;
        this[$oldShadowIntensity] = null;
        this[$oldBackground] = null;
        this[$rafId] = null;
        this[$refSpace] = null;
        this[$presentedScene] = null;
        this[$viewerRefSpace] = null;
        this[$frame] = null;
        this[$inputSource] = null;
        if (this[$resolveCleanup] != null) {
            this[$resolveCleanup]();
        }
        this.dispatchEvent({ type: 'status', status: ARStatus.NOT_PRESENTING });
    }
    /**
     * True if a scene is currently in the process of being presented in AR
     */
    get isPresenting() {
        return this[$presentedScene] != null;
    }
    updateTarget() {
        const scene = this[$presentedScene];
        if (scene != null) {
            // Move the scene's target to the model's floor height.
            const target = scene.getTarget();
            scene.setTarget(target.x, scene.model.boundingBox.min.y, target.z);
        }
    }
    [(_10 = $onUpdateScene, $updateCamera)](view) {
        const { camera } = this;
        const { matrix: cameraMatrix } = camera;
        cameraMatrix.fromArray(view.transform.matrix);
        camera.updateMatrixWorld(true);
        // position is not updated when matrix is updated.
        camera.position.setFromMatrixPosition(cameraMatrix);
        if (this[$initialHitSource] != null) {
            // Target locked to screen center
            const { position, model } = this[$presentedScene];
            const radius = model.idealCameraDistance;
            camera.getWorldDirection(position);
            position.multiplyScalar(radius);
            position.add(camera.position);
        }
        if (!this[$initialized]) {
            camera.projectionMatrix.fromArray(view.projectionMatrix);
            // Have to set the inverse manually when setting matrix directly. This is
            // needed for raycasting.
            camera.projectionMatrixInverse.getInverse(camera.projectionMatrix);
            // Orient model toward camera on first frame.
            const { x, z } = camera.position;
            const scene = this[$presentedScene];
            scene.pointTowards(x, z);
            scene.model.updateMatrixWorld(true);
            this[$goalYaw] = scene.yaw;
            this[$initialModelToWorld].copy(scene.model.matrixWorld);
            scene.model.setHotspotsVisibility(true);
            this[$initialized] = true;
            this.dispatchEvent({ type: 'status', status: ARStatus.SESSION_STARTED });
        }
        // Use automatic dynamic viewport scaling if supported.
        if (view.requestViewportScale && view.recommendedViewportScale) {
            const scale = view.recommendedViewportScale;
            view.requestViewportScale(Math.max(scale, MIN_VIEWPORT_SCALE));
        }
        const layer = this[$currentSession].renderState.baseLayer;
        const viewport = layer.getViewport(view);
        this.threeRenderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);
        this[$presentedScene].model.orientHotspots(Math.atan2(cameraMatrix.elements[1], cameraMatrix.elements[5]));
    }
    [$placeInitially](frame) {
        const hitSource = this[$initialHitSource];
        if (hitSource == null) {
            return;
        }
        const hitTestResults = frame.getHitTestResults(hitSource);
        if (hitTestResults.length == 0) {
            return;
        }
        const hit = hitTestResults[0];
        const hitMatrix = this[$getHitPoint](hit);
        if (hitMatrix == null) {
            return;
        }
        this.placeModel(hitMatrix);
        hitSource.cancel();
        this[$initialHitSource] = null;
        const { session } = frame;
        session.addEventListener('selectstart', this[$onSelectStart]);
        session.addEventListener('selectend', this[$onSelectEnd]);
        session
            .requestHitTestSourceForTransientInput({ profile: 'generic-touchscreen' })
            .then(hitTestSource => {
            this[$transientHitTestSource] = hitTestSource;
        });
    }
    [$getHitPoint](hitResult) {
        const pose = hitResult.getPose(this[$refSpace]);
        if (pose == null) {
            return null;
        }
        const hitMatrix = matrix4.fromArray(pose.transform.matrix);
        // Check that the y-coordinate of the normal is large enough that the normal
        // is pointing up.
        return hitMatrix.elements[5] > 0.75 ?
            hitPosition.setFromMatrixPosition(hitMatrix) :
            null;
    }
    /**
     * This sets the initial model placement based on the input hit point. The
     * bottom of the model will be placed on the floor (the shadow will rest on
     * the input's y-coordinate). The XZ placement is found by first putting the
     * scene's target at the hit point, drawing a ray from the camera to the
     * target, and finding the XZ-intersection of this ray with the model's
     * bounding box. The scene is then translated on the XZ plane to position this
     * intersection point at the input hit point. If the ray does not intersect,
     * the target is left at the hit point.
     *
     * This ensures the model is placed according to the chosen target, is not
     * reoriented, and does not intersect the camera even when the model
     * is large (unless the target is chosen outside of the model's bounding box).
     */
    placeModel(hit) {
        const scene = this[$presentedScene];
        const { model } = scene;
        const { min, max } = model.boundingBox;
        this[$placementBox].show = true;
        const goal = this[$goalPosition];
        goal.copy(hit);
        const floor = hit.y;
        const origin = this.camera.position.clone();
        const direction = hit.clone().sub(origin).normalize();
        // Pull camera back enough to be outside of large models.
        origin.sub(direction.multiplyScalar(model.idealCameraDistance));
        const ray = new Ray(origin, direction.normalize());
        const modelToWorld = this[$initialModelToWorld];
        const modelPosition = new Vector3().setFromMatrixPosition(modelToWorld).add(hit);
        modelToWorld.setPosition(modelPosition);
        const world2Model = new Matrix4().getInverse(modelToWorld);
        ray.applyMatrix4(world2Model);
        // Make the box tall so that we don't intersect the top face.
        max.y += 10;
        ray.intersectBox(model.boundingBox, modelPosition);
        max.y -= 10;
        if (modelPosition != null) {
            modelPosition.applyMatrix4(modelToWorld);
            goal.add(hit).sub(modelPosition);
        }
        // Move the scene's target to the model's floor height.
        const target = scene.getTarget();
        scene.setTarget(target.x, min.y, target.z);
        // Ignore the y-coordinate and set on the floor instead.
        goal.y = floor;
        this.dispatchEvent({ type: 'status', status: ARStatus.OBJECT_PLACED });
    }
    [(_11 = $onSelectStart, _12 = $onSelectEnd, $fingerSeparation)](fingers) {
        const fingerOne = fingers[0].inputSource.gamepad.axes;
        const fingerTwo = fingers[1].inputSource.gamepad.axes;
        const deltaX = fingerTwo[0] - fingerOne[0];
        const deltaY = fingerTwo[1] - fingerOne[1];
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    }
    [$processInput](frame) {
        const hitSource = this[$transientHitTestSource];
        if (hitSource == null) {
            return;
        }
        if (!this[$isTranslating] && !this[$isScaling] && !this[$isRotating]) {
            return;
        }
        const fingers = frame.getHitTestResultsForTransientInput(hitSource);
        const scene = this[$presentedScene];
        const scale = scene.scale.x;
        // Rotating, translating and scaling are mutually exclusive operations; only
        // one can happen at a time, but we can switch during a gesture.
        if (this[$isScaling]) {
            if (fingers.length < 2) {
                // If we lose the second finger, stop scaling (in fact, stop processing
                // input altogether until a new gesture starts).
                this[$isScaling] = false;
            }
            else {
                const separation = this[$fingerSeparation](fingers);
                const scale = separation / this[$lastScalar];
                this[$goalScale] =
                    (scale < SCALE_SNAP_HIGH && scale > SCALE_SNAP_LOW) ? 1 : scale;
            }
            return;
        }
        else if (fingers.length === 2 && scene.canScale) {
            // If we were rotating or translating and we get a second finger, switch
            // to scaling instead.
            this[$isTranslating] = false;
            this[$isRotating] = false;
            this[$isScaling] = true;
            this[$lastScalar] = this[$fingerSeparation](fingers) / scale;
            return;
        }
        if (this[$isRotating]) {
            const thisDragX = this[$inputSource].gamepad.axes[0];
            this[$goalYaw] += (thisDragX - this[$lastScalar]) * ROTATION_RATE;
            this[$lastScalar] = thisDragX;
        }
        else if (this[$isTranslating]) {
            fingers.forEach(finger => {
                if (finger.inputSource !== this[$inputSource] ||
                    finger.results.length < 1) {
                    return;
                }
                const hit = this[$getHitPoint](finger.results[0]);
                if (hit == null) {
                    return;
                }
                this[$goalPosition].sub(this[$lastDragPosition]);
                const offset = hit.y - this[$lastDragPosition].y;
                // When a lower floor is found, keep the model at the same height, but
                // drop the placement box to the floor. The model falls on select end.
                if (offset < 0) {
                    this[$placementBox].offsetHeight = offset / scale;
                    this[$presentedScene].model.setShadowScaleAndOffset(scale, offset);
                    // Interpolate hit ray up to drag plane
                    const cameraPosition = vector3.copy(this.camera.position);
                    const alpha = -offset / (cameraPosition.y - hit.y);
                    cameraPosition.multiplyScalar(alpha);
                    hit.multiplyScalar(1 - alpha).add(cameraPosition);
                }
                this[$goalPosition].add(hit);
                this[$lastDragPosition].copy(hit);
            });
        }
    }
    [$moveScene](delta) {
        const scene = this[$presentedScene];
        const { model, position, yaw } = scene;
        const radius = model.idealCameraDistance;
        const goal = this[$goalPosition];
        const oldScale = scene.scale.x;
        const box = this[$placementBox];
        if (this[$initialHitSource] == null &&
            (!goal.equals(position) || this[$goalScale] !== oldScale)) {
            let { x, y, z } = position;
            delta *= this[$damperRate];
            x = this[$xDamper].update(x, goal.x, delta, radius);
            y = this[$yDamper].update(y, goal.y, delta, radius);
            z = this[$zDamper].update(z, goal.z, delta, radius);
            position.set(x, y, z);
            const newScale = this[$scaleDamper].update(oldScale, this[$goalScale], delta, 1);
            scene.scale.set(newScale, newScale, newScale);
            if (!this[$isTranslating]) {
                const offset = goal.y - y;
                if (this[$placementComplete]) {
                    box.offsetHeight = offset / newScale;
                    model.setShadowScaleAndOffset(newScale, offset);
                }
                else if (offset === 0) {
                    this[$placementComplete] = true;
                    box.show = false;
                    scene.setShadowIntensity(AR_SHADOW_INTENSITY);
                    this[$damperRate] = 1;
                }
            }
        }
        box.updateOpacity(delta);
        scene.updateTarget(delta);
        // This updates the model's position, which the shadow is based on.
        scene.updateMatrixWorld(true);
        // yaw must be updated last, since this also updates the shadow position.
        scene.yaw = this[$yawDamper].update(yaw, this[$goalYaw], delta, Math.PI);
    }
    [$tick]() {
        this[$rafId] = this[$currentSession].requestAnimationFrame((time, frame) => this[$onWebXRFrame](time, frame));
    }
    [$onWebXRFrame](time, frame) {
        this[$frame] = frame;
        const pose = frame.getViewerPose(this[$refSpace]);
        // TODO: Notify external observers of tick
        this[$tick]();
        const scene = this[$presentedScene];
        if (pose == null || scene == null) {
            return;
        }
        // WebXR may return multiple views, i.e. for headset AR. This
        // isn't really supported at this point, but make a best-effort
        // attempt to render other views also, using the first view
        // as the main viewpoint.
        let isFirstView = true;
        for (const view of pose.views) {
            this[$updateCamera](view);
            if (isFirstView) {
                this[$placeInitially](frame);
                this[$processInput](frame);
                const delta = time - this[$lastTick];
                this[$moveScene](delta);
                this.renderer.preRender(scene, time, delta);
                this[$lastTick] = time;
            }
            // NOTE: Clearing depth caused issues on Samsung devices
            // @see https://github.com/googlecodelabs/ar-with-webxr/issues/8
            // this.threeRenderer.clearDepth();
            this.threeRenderer.render(scene, this.camera);
            isFirstView = false;
        }
    }
}
//# sourceMappingURL=ARRenderer.js.map